using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using BTMovie.Data;
using BTMovie.Models;
using System.Threading.Tasks;

namespace BTMovie.Controllers
{
public class PersonController : Controller
{
private readonly ApplicationDbContext _context;

public PersonController(ApplicationDbContext context)
{
_context = context;
}

// GET: Person
public async Task<IActionResult> Index()
    {
    return View(await _context.Persons.ToListAsync());
    }

    // GET: Person/Details/5
    public async Task<IActionResult> Details(int? id)
        {
        if (id == null)
        {
        return NotFound();
        }

        var person = await _context.Persons.FirstOrDefaultAsync(m => m.PersonId == id);
        if (person == null)
        {
        return NotFound();
        }

        return View(person);
        }

        // GET: Person/Create
        public IActionResult Create()
        {
        return View();
        }

        // POST: Person/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("PersonId,FullName,Address")] Person person)
            {
            if (ModelState.IsValid)
            {
            _context.Add(person);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
            }
            return View(person);
            }

            // GET: Person/Edit/5
            public async Task<IActionResult> Edit(int? id)
                {
                if (id == null)
                {
                return NotFound();
                }

                var person = await _context.Persons.FindAsync(id);
                if (person == null)
                {
                return NotFound();
                }
                return View(person);
                }

                // POST: Person/Edit/5
                [HttpPost]
                [ValidateAntiForgeryToken]
                public async Task<IActionResult> Edit(int id, [Bind("PersonId,FullName,Address")] Person person)
                    {
                    if (id != person.PersonId)
                    {
                    return NotFound();
                    }

                    if (ModelState.IsValid)
                    {
                    try
                    {
                    _context.Update(person);
                    await _context.SaveChangesAsync();
                    }
                    catch (DbUpdateConcurrencyException)
                    {
                    if (!PersonExists(person.PersonId))
                    {
                    return NotFound();
                    }
                    else
                    {
                    throw;
                    }
                    }
                    return RedirectToAction(nameof(Index));
                    }
                    return View(person);
                    }

                    // GET: Person/Delete/5
                    public async Task<IActionResult> Delete(int? id)
                        {
                        if (id == null)
                        {
                        return NotFound();
                        }

                        var person = await _context.Persons.FirstOrDefaultAsync(m => m.PersonId == id);
                        if (person == null)
                        {
                        return NotFound();
                        }

                        return View(person);
                        }

                        // POST: Person/Delete/5
                        [HttpPost, ActionName("Delete")]
                        [ValidateAntiForgeryToken]
                        public async Task<IActionResult> DeleteConfirmed(int id)
                            {
                            var person = await _context.Persons.FindAsync(id);
                            if (person != null)
                            {
                            _context.Persons.Remove(person);
                            await _context.SaveChangesAsync();
                            }
                            return RedirectToAction(nameof(Index));
                            }

                            private bool PersonExists(int id)
                            {
                            return _context.Persons.Any(e => e.PersonId == id);
                            }
                            }
                            }
